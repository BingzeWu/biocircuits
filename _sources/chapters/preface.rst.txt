Systems and synthetic biology are intertwined fields that connect to all aspects of biology and biomedical science. Whether you are trying to understand cellular or developmental biology, target cells to treat disease, or program cells as therapeutics, you will need to understand and engineer the circuits of interacting genes, proteins, and other molecules that make cells work. Here at Caltech, we find enormous, and ever-accelerating enthusiasm among students to learn what these fields are about, and apply their principles and methods to problems in their own research, or which they intend to address as they start their careers in academic biology, biotechnology, bioengineering, bioinformatics, biomedicine, bio-etcetera. 

This situation presents two exciting, but also terrifying, challenges. First, how do you decide which of the many beautiful and elegant biological circuits, and corresponding principles, to teach? We tried to select ones that are fundamental, likely to generalize to the diverse systems students will encounter, overlap with and build on one another, so that students can apply the same concepts in different contexts. To maintain students’ interest, and our own, we also mixed "vintage" examples, sometimes dating to before students were born, with more recent work. Most importantly, we focus on studies that identify ‘design principles’ through which biological circuit features provide specific capabilities.

Second, how do you balance academic understanding with practical know-how? To effectively analyze and design circuits, students need practical, but sophisticated, methods that can be applied to new circuits. Some of these are mathematical tools, like non-dimensionalizing equations, identifying fixed points, and so on. However, nearly any project one initiates now requires computation and coding as well: simulating circuit dynamics, understanding parameter sensitivities, plotting results, and so on. To be effective, students have to be able to use their computer as a research instrument. 

Each of the last six years, we have taught a Caltech course whose dual goals are to teach core concepts of biological circuit design alongside the computational methods needed to play with those principles in different contexts and to discover new principles in the future. Early on, we taught in a traditional format, combining lectures, discussion meetings, and problem sets, supplementing them with computational exercises in an ad hoc way. Increasingly, however, we realized that essentially every course topic benefited from a computational component, and we began to integrate coding more and more directly into the course materials. 

In 2019 we decided to organize all course content in Jupyter notebooks. Over the last decade, Project Jupyter and its notebook interface emerged as a powerful way to access a growing set of open source libraries for scientific computation and to communicate code, integrated with text, equations, and graphics, to create rich, interactive scientific documents. Jupyter notebooks allow students to tinker with examples that we provide, and extend or replace them with their own code. This process empowers students to explore and apply what they are learning. We have now seen many examples in which students take equations and code directly from course notebooks and apply it in their own research projects. We have also seen how the notebooks help students with weaker backgrounds in math, coding, or computation get up to speed quicker and in some cases become fluent before the end of the term. 

The course continues to evolve, and the contents of the notebooks are not as complete, tidy, consistent, or clear, as we want them to eventually be. Nevertheless, we hope that even in this form they might already be useful to others, used as an interactive "book," as parts of a course, or as reference material for systems and synthetic biologists actively working on specific problems. We think of this as a "1.0" release that can be updated with more or better content in the future. 

The contents are structured around a set of notebook "chapters," each combining concepts and computation in one way or another:

First, before we get going with the biology, we provide a brief how-to guide for setting up Jupyter and various Python packages used in the course. This will get you up and running as quickly as possible. 

In Chapters 1 and 2, we introduce goals and challenges of biological circuit design. We then kick off circuit analysis by identifying basic design principles governing dynamic regulation of a single gene, developing the foundations for representing the simplest gene regulation systems using differential equations, analyzing their steady states, and using python to simulate their dynamic behaviors (Chapter 1). These chapters provide foundations for analysis of more complex systems.

Chapters 3 and 4 grapple with basic feedback and feed-forward circuits. Chapter 3 introduces the simplest feedback circuits, showing how negative autoregulation can speed response times, and how positive feedback generates multistability. These examples provide the opportunity to discuss how synthetic biology allows one to explore the relationship between circuit design and function. Analytically, we introduce Hill functions and basic dynamical systems concepts such as fixed points, nullclines, and stability, and show how python allows graphical analysis of these systems. In Chapter 4, we describe feed-forward loops, prevalent circuit motifs that provide a variety of temporal filtering functions. This allows us to consider combinatorial regulation of a gene by multiple transcription factors. Computationally, we introduce "dashboarding" to allow interactive exploration of parameter spaces. 

Chapters 5-7 switch to questions of robustness and fidelity. In Chapter 5, we encounter the design principle of robustness, and show a simple incoherent feed-forward loop can allow a gene to produce the same amount of protein regardless of its copy number in the cell, a capability that is critical for both natural and synthetic systems. Chapter 6 takes robustness from gene regulation to protein circuits, focusing on the classic example of bacterial chemotaxis, a system that responds in an adaptive manner to its inputs across a huge dynamic range of concentrations. This chapter also introduces Michaelis-Menten kinetics, which will be useful in subsequent studies. In Chapter 7, we study Hopfield’s kinetic proofreading, which can improve selectivity in molecular recognition, including translation. 

Chapters 8-9 turn to oscillators. In Chapter 8, we consider a simple synthetic clock circuit called the repressilator. We show how linear stability analysis allows one to design the repressilator to generate limit cycle oscillations, and how this simple circuit was iteratively engineered to achieve astonishing precision. Chapter 9 considers other oscillators, including a simple time-delayed negative feedback loop that allows us to introduce delay differential equations, as well as oscillator designs based on coupled positive and negative feedback loops that allow independent regulation of period and amplitude. 

Chapters 10-14 explore stochastic fluctuations, or "noise," as both "bug" and "feature."" We begin in Chapter 10 by trying to understand how noise originates and propagates in the cell, decomposing it into its intrinsic and extrinsic components. Then in Chapter 11, we show the bursty nature of gene expression naturally leads to a family of distributions for protein levels that can range from tight to long-tailed. In Chapter 12, we introduce stochastic simulations and show how they can be used to analyze the distribution of behaviors expected of a given circuit. Noise is not just amorphous biological fuzz, but a specific process that can be understood, analyzed, and simulated. 

But Chapters 13 and 14 then switch to considering the beneficial roles of noise by analyzing how it enables cells to "roll the dice" to regulate their own differentiation in a probabilistic manner. Chapter 13 considers how this plays out in the context of bacterial competence, which is transiently activated in a noise dependent manner in a fraction of cells through a noise-excitable circuit. Since the cell can use noise to act probabilistically, we step back to consider some principles for optimal betting, and bet-hedging in Chapter 14. 

In addition to these core topics, we also provide a small sample of homework problems that can be done alongside the 

We think of these notebooks as a hybrid of lecture notes, chapters of a book, and interactive.  

The content of these lectures owes a great deal to books by Uri Alon and Domitilla Del Vecchio and Richard Murray, both of which we use in our course. 
Where the topics overlap, particularly in the earlier chapters on some of the more canonical topics, the notebooks complement these books by supplying computational frameworks that students can use to explore the circuits using code.  
These books also provide excellent exercises. 




Early on, we taught the course in a traditional format, making extensive use of research papers, along with Strogatz’s excellent book on Dynamical Systems and Chaos. Uri Alon’s iconic Introduction to Systems Biology, now in its second edition, helped canonize a set of core systems as well as an elegant, incisive style of reasoning that we believe is essential for reasoning about circuits. We also used Domitilla Del Vecchio and Richard Murray’s excellent book, Biomolecular Feedback Systems Teaching with these materials worked well: We assigned students problem sets, discussed examples, and liberally introduced additional interesting systems each year. 
Jupyter: 
This book is designed for students and researchers who want to not only understand existing work, but also seek to make new discoveries of their own, or, as synthetic biologist, program cells. To that end, our philosophy is to let them work directly with example code that they will 
Biocircuits package contains some supporting code that 
What about other packages for simulating circuits? In our experience, 
This is a living document. 
We anticipate updating these documents, extending with additional chapters on new systems or revisions to work on existing ones.
Errors are undoubtedly present in the work, and we would love to know if you find them so they can be corrected.
We invite feedback on what aspects work or don’t work. [discussion board on the github page?].


How to cite the book: doi
The materials here are © 2020, provided under the XXXXX license.
Acknowledgements 
These notebooks evolved out of many years of the course, and countless discussions with colleagues and students. For several years, one of us co-taught the course with Richard Murray, who invigorated the course and stimulated us to further emphasize approaches from control theory. Enormous contributions were also made by a long list of fantastic student teaching assistants who helped develop and grade problem sets, and worked closely with students in the course. Their insights, along with those of the students themselves, have been a constant source of new insights as the course evolved. We have also had a tradition of reserving one lecture each year for a guest lecture. In recent years, these have included superstars of systems biology, including Roy Kishony, Uri Alon, Jordi Garcia-Ojalvo[?], as well as equally talented students and postdocs, including Nagarajan (Sandy) Nandagopal, Yaron Antebi, and Ron Zhu. 




.. TAs: 
.. Pre JB days: Victoria Hsiao (she did influence some of Anadh’s thinking that he shared with us), Emzo de los Santos, Vanessa Jönsson, Fiona Chandra

.. 2015:  Vipal Singhal (now postdoc at Genome Institute of Singapore) and Anandh Swaminathan (now at Persephone Biome)
.. 2016: Soumya Kannan (now at MIT as grad student) and Anandh Swaminathan
.. 2017: James McGehee (Caltech grad student) and Ron Zhu (Caltech)
.. 2018:  Junedh Amrute (now at UW medical school) and Ron Zhu (Caltech)
.. 2019: Andy Halleran (Caltech) and Tyler Ross (forgot where he went. Harvard maybe? Can ask Matt)
.. 2020: Rory Williams (Caltech) and John Marken (Caltech)

.. Guest lecturers:
.. 2015: None. Possibly Joe Markson, but I think we just discussed KaiABC with him.
.. 2016: Yihan Lin and Nagarajan (Sandy) Nandagopal
.. 2017: Yaron Antebi and Nagarajan (Sandy) Nandagopal
.. 2019: Roy Kishony
.. 2020: Ron Zhu
.. 2021: Ron Zhu, Lacra Bintu, Uri Alon

