{"cells": [{"cell_type": "markdown", "metadata": {}, "source": ["# Problem 13.1: Programming cellular response\n", "\n", "<hr>"]}, {"cell_type": "code", "execution_count": 25, "metadata": {}, "outputs": [], "source": ["import numpy as np\n", "\n", "import eqtk"]}, {"cell_type": "markdown", "metadata": {}, "source": ["<hr>"]}, {"cell_type": "markdown", "metadata": {}, "source": ["We have seen in this chapter that the combinatoric binding of multiple ligand types with multiple receptor types can lead to cellular addressing. In this problem, you will develop a scheme using two types of ligands, two types of \"A\" receptors, and two types of \"B\" receptors (as in this chapter) whereby the cell can exist respond to variation in ligand concentration in three orthogonal prescribed ways. We will following closely the work of [Su, et al., 2022](https://doi.org/10.1016/j.cels.2022.03.001).\n", "\n", "We use the one-step promiscuous ligand-receptor model from this chapter, using the same notation. We define by a ligand \"word\" to be a set of specific concentration values for each ligand variant in a combination. For example, a concentration of 10 mM for ligand 1 and 100 mM for ligand 2 constitutes a ligand word (10 mM, 100 mM). In the diagram below, we have three ligand words.\n", "\n", "<div style=\"width: 100px; margin: auto;\">\n", "\n", "![ligand_words](ligand_words.png)\n", "\n", "</div>\n", "\n", "Each word should encode a separate cellular response, giving different cell types. An example of three responses is shown in the image below.\n", "\n", "<div style=\"width: 100px; margin: auto;\">\n", "\n", "![ligand_words](responses.png)\n", "\n", "</div>\n", "\n", "The cell \"cares\" about the levels in the colored regions; the response in the hatched regions is irrelevant. In the above diagram, purple indicates low response and yellow indicates a high response.\n", "\n", "Your task is to come up with a set of parameters, eight $K_{ijk}$'s and eight $\\epsilon_{ijk}$'s, along with three sets of receptor concentrations, each containing the concentrations of A\u2081, A\u2082, B\u2081, and B\u2082, that have the desired response above, one each for each of the three words in the top diagram. An example of a desired response is shown below.\n", "\n", "<div style=\"width: 500px; margin: auto;\">\n", "\n", "![ligand_words](computed_responses.png)\n", "\n", "</div>\n", "\n", "In working this problem, it helps to have some handy functions from the chapter."]}, {"cell_type": "code", "execution_count": 26, "metadata": {}, "outputs": [], "source": ["def make_rxns(nA, nB, nL):\n", "    '''\n", "    Generate trimolecular binding reactions for a system with\n", "    nA, nB, and nL types of Type A receptors, Type B receptors,\n", "    and ligands, respectively. Returns a single string.\n", "    '''\n", "    rxns = \"\"\n", "    for k in range(nB):\n", "        for j in range(nL):\n", "            for i in range(nA):\n", "                rxns += f\"A_{i+1} + L_{j+1} + B_{k+1} <=> T_{i+1}_{j+1}_{k+1}\\n\"\n", "    return rxns\n", "\n", "\n", "def make_N(nA, nB, nL):\n", "    \"\"\"Generate a stoichiometric matrix for ligand-receptor binding with\n", "    nA, nB, and nL types of Type A receptors, Type B receptors, and \n", "    ligands, respectively.\n", "    \"\"\"\n", "    rxns = make_rxns(nA, nB, nL)\n", "    N = eqtk.parse_rxns(rxns)\n", "\n", "    # Sorted names\n", "    names = sorted(N.columns, key=lambda s: (len(s), s))\n", "\n", "    # Sorted columns\n", "    N = N[names]\n", "\n", "    # As a Numpy array\n", "    return N.to_numpy(copy=True, dtype=float)\n", "\n", "\n", "def readout(epsilon, c):\n", "    \"\"\"Readout function of a set of complex concentrations. This\n", "    is the expression level of the genes under regulation of\n", "    singaling from the receptors.\n", "    \"\"\"\n", "    return np.dot(epsilon, c[:, -len(epsilon):].transpose())"]}, {"cell_type": "markdown", "metadata": {}, "source": ["We can make a stoichiometric matrix using these functions; it will be the same for all calculations we do."]}, {"cell_type": "code", "execution_count": 28, "metadata": {}, "outputs": [], "source": ["N = make_N(2, 2, 2)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Half of the battle in problems like these is keeping track of indices and what species is what. The columns of the stoichiometric matrix correspond to the following species.\n", "\n", "| index | species |\n", "| ----------- | ----------- |\n", "| 0 | A\u2081 |\n", "| 1 | A\u2082 |\n", "| 2 | B\u2081 |\n", "| 3 | B\u2082 |\n", "| 4 | L\u2081 |\n", "| 5 | L\u2082 |\n", "| 6 | A\u2081L\u2081B\u2081 |\n", "| 7 | A\u2082L\u2081B\u2081 |\n", "| 8 | A\u2081L\u2082B\u2081 |\n", "| 9 | A\u2082L\u2082B\u2081 |\n", "| 10 | A\u2081L\u2081B\u2082 |\n", "| 11 | A\u2082L\u2081B\u2082 |\n", "| 12 | A\u2081L\u2082B\u2082 |\n", "| 13 | A\u2082L\u2082B\u2082 |"]}, {"cell_type": "markdown", "metadata": {}, "source": ["These indices also correspond to the species in our inputted initial concentrations and in the output of EQTK's solver for the equilibrium concentrations. With that in mind, we can write a function to generate our initial concentration values for a given set of initial ligand concentrations, `cL0`."]}, {"cell_type": "code", "execution_count": 31, "metadata": {}, "outputs": [], "source": ["def make_c0_grid(cL0, cA10, cA20, cB10, cB20):\n", "    \"\"\"Create an array of initial concentrations.\n", "    \n", "    Parameters\n", "    ----------\n", "    cL0 : array_like\n", "        Array of ligand concentrations. This is the same for ligand\n", "        1 and ligand 2, so a single 1D array is all that is required.\n", "    cA10 : float\n", "        Total concentration of receptor A1.\n", "    cA20 : float\n", "        Total concentration of receptor A2.\n", "    cB10 : float\n", "        Total concentration of receptor A1.\n", "    cB20 : float\n", "        Total concentration of receptor B2.\n", "\n", "    Returns\n", "    -------\n", "    output : 2D Numpy array\n", "        If n is the length of the cL0 input array, the output\n", "        is an n\u00b2 by 14 array. Columns 0 through 3 are the total\n", "        receptor concentrations. Columns 4 and 5 are the ligand\n", "        concentrations. Columns 6 through 13 are the concentrations\n", "        of all of the possible trimers (all set to zero).\n", "    \"\"\"\n", "    # Number of ligand concentrations\n", "    n = len(cL0)\n", "    \n", "    # Ligand concentrations\n", "    cL0 = np.meshgrid(*tuple([cL0] * 2))\n", "\n", "    # Initialize c0\n", "    c0 = np.zeros((n**2, 14))\n", "\n", "    # Add ligand concentrations\n", "    c0[:, 4] = cL0[0].flatten()\n", "    c0[:, 5] = cL0[1].flatten()\n", "    \n", "    # Add receptor concentrations\n", "    c0[:, 0] = cA10\n", "    c0[:, 1] = cA20\n", "    c0[:, 2] = cB10\n", "    c0[:, 3] = cB20\n", "\n", "    return c0"]}, {"cell_type": "markdown", "metadata": {}, "source": ["In trying to find parameters, we will take\n", "\n", "    cL0 = np.array([1.0, 32.0, 1000.0])\n", "\n", "Next, in order to do the calculation, we need to specify the target response and for which ligand concentrations the target response is relevant. We refer to the latter as `active_target`, defined below."]}, {"cell_type": "code", "execution_count": 37, "metadata": {}, "outputs": [], "source": ["# Ligand words from top diagram\n", "active_target = np.array([0, 0, 1, 0, 0, 0, 1, 0, 1], dtype=bool)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["You can see how it corresponds to the words by comparing to our target ligand concantrations."]}, {"cell_type": "code", "execution_count": 38, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["Ligand 1:      [   1.   32. 1000.    1.   32. 1000.    1.   32. 1000.]\n", "Ligand 2:      [   1.    1.    1.   32.   32.   32. 1000. 1000. 1000.]\n", "active target: [False False  True False False False  True False  True]\n"]}], "source": ["c0 = make_c0_grid(np.array([1, 32, 1000]), 0, 0, 0, 0)\n", "print(\"Ligand 1:     \", c0[:, 4])\n", "print(\"Ligand 2:     \", c0[:, 5])\n", "print(\"active target:\", active_target)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["The target is listed as active according to wherever we are considering a ligand word."]}, {"cell_type": "code", "execution_count": 33, "metadata": {}, "outputs": [{"data": {"text/plain": ["array([[False, False,  True],\n", "       [False, False, False],\n", "       [ True, False,  True]])"]}, "execution_count": 33, "metadata": {}, "output_type": "execute_result"}], "source": ["active_target.reshape((3, 3))"]}, {"cell_type": "markdown", "metadata": {}, "source": ["We can now specify a list of target responses."]}, {"cell_type": "code", "execution_count": 39, "metadata": {}, "outputs": [], "source": ["targets = [\n", "    np.array([0, 0, 0, 0, 0, 0, 1, 0, 0]), # Ligand 1 low, ligand 2 high\n", "    np.array([0, 0, 1, 0, 0, 0, 0, 0, 0]), # Ligand 1 high, ligand 2 low\n", "    np.array([0, 0, 0, 0, 0, 0, 0, 0, 1]), # Ligand 1 high, ligand 2 high\n", "]\n", "\n", "# Useful to know how many cell types we have\n", "n_cell_types = len(targets)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Finally, it will be useful to have a function to solve for the normalized response of a cell to an inputted set of initial concentrations and parameters. The function returns the cellular response, with the maximum value of the response over all ligand concentrations being set to one.\n", "\n", "**a)** Complete the function below."]}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": ["def solve_norm_response(c0, N, K, epsilon):\n", "    \"\"\"Solve for normalized response.\n", "    \"\"\"\n", "    pass"]}, {"cell_type": "markdown", "metadata": {}, "source": ["**b)** To find optimal parameters, we will "]}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": ["def solve_readout(c0, N, K, epsilon):\n", "    fixed_c = np.nan * np.ones_like(c0)\n", "    fixed_c[:, 4:6] = c0[:, 4:6]\n", "    c = eqtk.fixed_value_solve(c0=c0, fixed_c=fixed_c, N=N, K=K)\n", "    c = eqtk.solve(c0=c0, N=N, K=K)\n", "    return readout(epsilon, c)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Hint: The optimization will converge to a local minimum, which may not hit your target addressing very well. You can try rerunning the optimization with a different set of starting guesses for the parameters and receptor concentrations."]}, {"cell_type": "markdown", "metadata": {}, "source": ["<br />"]}], "metadata": {"anaconda-cloud": {}, "kernelspec": {"display_name": "Python 3 (ipykernel)", "language": "python", "name": "python3"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.9.12"}}, "nbformat": 4, "nbformat_minor": 4}